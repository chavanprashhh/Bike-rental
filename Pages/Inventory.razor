@page "/inventory"
@using Bike_Service_IMS.Data;
@using System.Reflection;
@using System.Text.Json

<MudAppBar Color="Color.Transparent" Fixed="false" Class="mb-3">
    <div><h1>Inventory</h1></div>
    <MudSpacer />
    @if (showItemForm != true && userState.CurrentUser.Role == "Admin")
    {
        <div class="align-users-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowForm">Add Items</MudButton>
        </div>
    }
</MudAppBar>
@if(showItemForm == true)
{
    <MudCard class="mt-5">
        <MudCardContent>
            <MudForm>
                <MudTextField Label="Name" @bind-Value="Name" Required="true" RequiredError="Name is required!"/>
                <MudTextField Label="Quantity" @bind-Value="Quantity" Required="true" RequiredError="Quantity is required!" />
                <MudDatePicker Label="Added Date" Editable="true" @bind-Value="AddedDate" Placeholder="Select Date" 
                               Required="true" RequiredError="Added Date is required!" />
                <MudTextField Label="Purchase Price" @bind-Value="PurchasePrice" Required="true" RequiredError="Purchase Price is required!" />
                <MudTextField Label="Selling Price" @bind-Value="SellingPrice" Required="true" RequiredError="Selling Price is required!" />
                @if (showError == true)
                {
                    <MudAlert Severity="Severity.Error">@addItemMessage</MudAlert>
                }
                <MudButton OnClick="AddItem" Variant="Variant.Filled" Color="Color.Primary" class="mt-3 me-2">Add Item</MudButton>
                <MudButton OnClick="HideForm" Variant="Variant.Filled" Color="Color.Primary" class="mt-3">
                    Close
                </MudButton>
            </MudForm>
        </MudCardContent>
    </MudCard>
}
@if (items.Count !=0)
{
    <MudSimpleTable Style="overflow-x: auto;" Class="mt-5">
    <thead>
        <tr>
            <th>Name</th>
            <th>Quantity</th>
            <th>Added By</th>
            <th>Added Date</th>
            <th>Purchase Price</th>
            <th>Selling Price</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in items)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Quantity</td>
                <td>@item.AddedBy</td>
                <td>@item.AddedDate.ToString("MMM dd, yyyy h:mm tt")</td>
                <td>@item.PurchasePrice</td>
                <td>@item.SellingPrice</td>
                <td>
                    <MudButton OnClick="()=>Delete(item)" Variant="Variant.Filled" Color="Color.Primary" class="mt-3">
                         Delete
                    </MudButton>
                    <MudButton OnClick="()=>Update(item)" Variant="Variant.Filled" Color="Color.Primary" class="mt-3">
                            Add More
                    </MudButton>
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>
    @if (showDeleteMessage == true)
    {
        <MudCard Class="mt-4">
            <MudCardContent>
                <MudText Typo="Typo.h5">Do you want to delete item <strong>@deleteItem.Name</strong>?</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Success" Class="col-md-1 me-2" OnClick="DeleteItem">Yes</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" Class="col-md-1" OnClick="CloseCard">No</MudButton>
            </MudCardActions>
        </MudCard>
    }
    @if (showUpdateMessage == true)
    {
        <MudCard Class="mt-4">
            <MudCardContent>
                <MudText Typo="Typo.h5">Do you want to add more <strong>@updateItem.Name</strong>?</MudText>
                <MudTextField Label="Quantity" @bind-Value="AddQuantity" Required="true" RequiredError="Quantity is required!" />
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Success" Class="col-md-1 me-2" OnClick="UpdateItem">Yes</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" Class="col-md-1" OnClick="CloseUpdateCard">No</MudButton>
            </MudCardActions>
        </MudCard>
    }
}



@code {
    private string Name { get; set; }
    private int Quantity { get; set; }
    private int AddQuantity { get; set; }
    private DateTime AddedDate { get; set; }
    private double PurchasePrice { get; set; }
    private double SellingPrice { get; set; }
    List<Item> items { get; set; }
    private Item deleteItem { get; set; }
    private Item updateItem { get; set; }
    bool showDeleteMessage = false;
    bool showUpdateMessage = false;
    bool showItemForm = false;
    bool showError = false;
    string addItemMessage = "";
    private string deleteErrorMessage = "";
    private string updateErrorMessage = "";
    [CascadingParameter]
    UserState userState { get; set; }
    protected override void OnInitialized()
    {
        items = UserServices.ReadItem();
    }
    public void ShowForm()
    {
        showItemForm = true;
    }
    public void HideForm()
    {
        showItemForm = false;
    }
    public void CloseCard()
    {
        showDeleteMessage = false;
    }
    public void CloseUpdateCard()
    {
        showUpdateMessage = false;
    }
    public void AddItem()
    {
        try
        {
            if (String.IsNullOrEmpty(Name) && Quantity == 0 && PurchasePrice == 0  && SellingPrice == 0)
            {
                showError = true;
                addItemMessage = "Please fill the form properly!";
            }
            else
            {
                AddedDate = DateTime.Now;
                items = UserServices.AddItem(Name, Quantity, AddedDate, userState.CurrentUser.Username, PurchasePrice, SellingPrice);

            }
        }
        catch (Exception e)
        {
            showError = true;
            addItemMessage = e.Message;
        }
    }
    private void Delete(Item item)
    {
        deleteItem = item;
        showDeleteMessage = true;
    }
    private void DeleteItem()
    {
        try
        {
            deleteErrorMessage = "";
            items = UserServices.DeleteItem(deleteItem.Name);
            CloseCard();
            deleteItem = null;
        }
        catch (Exception e)
        {
            deleteErrorMessage = e.Message;
        }
    }
    private void Update(Item item)
    {
        updateItem =item;
        showUpdateMessage = true;
    }
    private void UpdateItem()
    {
        try
        {
            updateErrorMessage = "";
            items = UserServices.UpdateItem(updateItem.Name,AddQuantity);
            CloseUpdateCard();
            updateItem = null;
        }
        catch (Exception e)
        {
            updateErrorMessage = e.Message;
        }
    }
}
